@page "/new-income"
@inject ServiceClient ServiceClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService

@if (Item == null)
{
    <Loading />
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@Back" Text="Back"></RadzenButton>
    <br />
    <RadzenCard>
        <EditForm Model="Item" OnSubmit="@Submit">
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Value (€)</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value="@Item.Value" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Reason</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenTextBox @bind-Value="@Item.Reason" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Date</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenDatePicker @bind-Value=@Item.Date DateFormat="yyyy-MM-dd" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem" class="rz-text-align-right">
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Create"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </EditForm>
    </RadzenCard>
}

@code {
    private IncomeDetails Item { get; set; }

    protected override void OnInitialized()
    {
        Item = new IncomeDetails
            {
                Date = DateTimeOffset.Now
            };
    }

    private async Task Submit()
    {
        var confirmed = await DialogService.Confirm("Are you sure you want to create this new income?", "Create new income", new ConfirmOptions
            {
                ShowClose = false,
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (confirmed is not null && (bool)confirmed)
        {
            try
            {
                var createdIncome = await ServiceClient.CreateIncomeAsync(Item);
                await DialogService.Alert($"New income with ID {createdIncome.Id} has been created", "New income created", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
                NavigationManager.NavigateTo("incomes");
            }
            catch (Exception e)
            {
                await DialogService.Alert($"Unable to create new income. Error: {e.Message}", "Error", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
            }
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("incomes");
    }
}