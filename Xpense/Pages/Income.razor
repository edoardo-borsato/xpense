@page "/income/{id}"
@inject ServiceClient ServiceClient
@inject NavigationManager NavigationManager
@inject DialogService DialogService

@if (_loading)
{
    <Loading />
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@Back" Text="Back"></RadzenButton>
    <br />
    <RadzenCard>
        <EditForm Model="Item" OnSubmit="@Submit">
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Value (€)</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value="@Item.IncomeDetails.Value" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Reason</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenTextBox @bind-Value="@Item.IncomeDetails.Reason" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Date</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenDatePicker @bind-Value=@Item.IncomeDetails.Date DateFormat="yyyy-MM-dd" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem" class="rz-text-align-right">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Icon="delete" Click="@DeleteIncomeAsync"></RadzenButton>
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Update"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </EditForm>
    </RadzenCard>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Xpense.Income Item { get; set; }

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Item = await ServiceClient.GetIncomeAsync(Guid.Parse(Id));
            _loading = false;
        }
        catch (Exception e)
        {
            await DialogService.Alert($"Unable to retrieve income with ID {Id}. Error: {e}", "Error", new AlertOptions
                {
                    ShowClose = false,
                    OkButtonText = "Ok"
                });
        }
    }

    private async Task Submit()
    {
        var confirmed = await DialogService.Confirm($"Are you sure you want to update income with ID {Id}?", "Update income", new ConfirmOptions
            {
                ShowClose = false,
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (confirmed is not null && (bool)confirmed)
        {
            try
            {
                var updatedIncome = await ServiceClient.UpdateIncomeAsync(Item.Id!.Value, Item.IncomeDetails);
                await DialogService.Alert($"Income with ID {updatedIncome.Id} has been updated", "Update Income", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
                Back();
            }
            catch (Exception e)
            {
                await DialogService.Alert($"Unable to update income with ID {Id}. Error: {e.Message}", "Error", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
            }
        }
    }

    private async Task DeleteIncomeAsync()
    {
        var confirmed = await DialogService.Confirm($"Are you sure you want to delete income with ID {Id}?", "Delete income", new ConfirmOptions
            {
                ShowClose = false,
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (confirmed is not null && (bool)confirmed)
        {
            try
            {
                await ServiceClient.DeleteIncomeAsync(Item.Id!.Value);
                await DialogService.Alert($"Income with ID {Id} has been deleted", "Delete income", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
                Back();
            }
            catch (Exception e)
            {
                await DialogService.Alert($"Unable to delete income with ID {Id}. Error: {e.Message}", "Error", new AlertOptions
                    {
                        ShowClose = false,
                        OkButtonText = "Ok"
                    });
            }
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("incomes");
    }
}
