@page "/expenses"
@using Xpense.Utility
@inject ExpensesManager ExpensesManager
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IFormatter Formatter
@inject ISettingsManager SettingsManager
@inject DateFilter Filter

@if (_expenses == null)
{
    <Loading />
}
else
{
    <RadzenCard>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4"><strong>Count</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4" Text="@_expenses.Count().ToString()"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4"><strong>Total</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4" Text="@Formatter.FormatAsEuro(_expenses.Sum(e => e.ExpenseDetails.Value))"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText Text="From"></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenDatePicker @bind-Value=@Filter.From DateFormat="yyyy-MM-dd" Class="w-100" Change="@GetExpensesAsync" />
            </RadzenColumn>
        </RadzenRow>
        <br />
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText Text="To"></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenDatePicker @bind-Value=@Filter.To DateFormat="yyyy-MM-dd" Class="w-100" Change="@GetExpensesAsync" />
            </RadzenColumn>
        </RadzenRow>
        <br />
        <RadzenRow Gap="1rem" class="rz-text-align-center">
            <RadzenColumn>
                <RadzenButton Click=@ResetFilterAsync ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Text="Reset to current month"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard class="rz-text-align-center">
        <RadzenButton Click=@CreateNewExpense ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Icon="add" Text="Add new" Size="ButtonSize.Large"></RadzenButton>
    </RadzenCard>
    <RadzenCard>
        <RadzenDataGrid RowClick="@RowClick" Data="@_expenses" TItem="Xpense.Expense" GridLines="DataGridGridLines.Default" AllowPaging="true" AllowSorting="false">
            <Columns>
                <RadzenDataGridColumn TItem="Xpense.Expense" Property="ExpenseDetails.Date" Title="Date">
                    <Template Context="detail">
                        @detail.ExpenseDetails.Date.ToString("yyyy-MM-dd")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Xpense.Expense" Property="ExpenseDetails.Value" Title="Value">
                    <Template Context="detail">
                        @Formatter.FormatAsEuro(detail.ExpenseDetails.Value)
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
    <br />
}

@code {
    private IEnumerable<Xpense.Expense> _expenses = Array.Empty<Xpense.Expense>();

    protected override async Task OnInitializedAsync()
    {
        var username = SettingsManager.GetUsername();
        if (string.IsNullOrWhiteSpace(username))
        {
            await DialogService.AlertAsync(AlertType.Info, "Username required", "No username has been configured, you will be redirected to the Settings page");
            NavigationManager.NavigateTo("/settings");
        }
        else
        {
            await GetExpensesAsync();
        }
    }

    private async Task ResetFilterAsync()
    {
        var now = DateTimeOffset.Now;
        var firstDayOfCurrentMonth = new DateTime(now.Year, now.Month, 1);
        var firstDayOfNextMonth = firstDayOfCurrentMonth.AddMonths(1);
        Filter.From = firstDayOfCurrentMonth;
        Filter.To = firstDayOfNextMonth;
        await GetExpensesAsync();
    }

    private async Task GetExpensesAsync()
    {
        try
        {
            _expenses = (await ExpensesManager.GetAllAsync(Filter.From.ToString("yyyy-MM-dd"), Filter.To.ToString("yyyy-MM-dd"), null))
                .OrderByDescending(e => e.ExpenseDetails.Date);
        }
        catch (Exception e)
        {
            await DialogService.AlertAsync(AlertType.Error, "Error", $"Cannot retrieve expenses. Error: {e}");
        }
    }

    private void GoToExpense(Guid? id)
    {
        NavigationManager.NavigateTo($"expense/{id}");
    }

    private void CreateNewExpense()
    {
        NavigationManager.NavigateTo("newexpense");
    }

    private void RowClick(DataGridRowMouseEventArgs<Xpense.Expense> obj)
    {
        GoToExpense(obj.Data.Id);
    }

}
