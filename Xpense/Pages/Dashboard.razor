@page "/dashboard"
@using Xpense.Utility
@inject ExpensesManager ExpensesManager
@inject DialogService DialogService
@inject IFormatter Formatter

@if (_loading)
{
    <Loading/>
}
else
{
    <RadzenCard>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4"><strong>Count</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4" Text="@_expenses.Count().ToString()"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4"><strong>Total</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4" Text="@Formatter.FormatAsEuro(_expenses.Sum(e => e.ExpenseDetails.Value))"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem" Visible="@(_selectedMonth is Month.AllMonths)">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4"><strong>AVG per month</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H4" Text="@Formatter.FormatAsEuro(_averageExpensePerMonth)"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard>
        <div class="row">
            <div class="col h4">
                <RadzenDropDown AllowClear="false" TValue="int" Class="w-100" Data="@_availableYears" Change="@(OnYearChange)" Value="@_selectedYear" />
            </div>
            <div class="col h4">
                <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" Data="@_availableMonths" Change="@(OnMonthChange)" Value="@_selectedMonth.ToString()" />
            </div>
        </div>
    </RadzenCard>
    
@*BAR*@
    <RadzenCard Visible="@(_selectedMonth is not Month.AllMonths)">
        <RadzenChart>
            <RadzenPieSeries Data="@_selectedMonthDataGroupedByCategory" Title="@_selectedMonth.ToString()" CategoryProperty="Category" ValueProperty="TotalExpense" Fills="@PASTEL_COLOR_PALETTE">
            </RadzenPieSeries>
            <RadzenLegend Visible="false" Position="LegendPosition.Bottom" />
        </RadzenChart>
        <RadzenRow>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75ABF0" /> @Category.Others.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F075E8" /> @Category.HealthAndPersonalCare.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0BA75" /> @Category.Transportation.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F07D" /> @Category.Entertainment.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#4790EA" /> @Category.Pets.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#EA47E2" /> @Category.Gifts.ToString()</RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#9C75F0" /> @Category.HousingAndSupplies.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0758C" /> @Category.Sport.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#C9F075" /> @Category.Clothing.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F0D9" /> @Category.BillsAndUtilities.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#7B47EA" /> @Category.Insurance.ToString()</RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard Visible="@(_selectedMonth is Month.AllMonths)">
        <RadzenChart>
            <RadzenBarSeries Data="@_allYearDataGroupedByMonth" CategoryProperty="Month" Title="@_selectedYear.ToString()" LineType="LineType.Dashed" ValueProperty="TotalExpense"/>
            <RadzenValueAxis Formatter="@Formatter.FormatAsEuro">
                <RadzenGridLines Visible="true"/>
                <RadzenAxisTitle Text="Total expenses"/>
            </RadzenValueAxis>
            <RadzenBarOptions Radius="5"/>
        </RadzenChart>
    </RadzenCard>
    <RadzenCard Visible="@(_selectedMonth is Month.AllMonths)">
        <RadzenChart>
            <RadzenPieSeries Data="@_allYearDataGroupedByCategory" Title="@_selectedYear.ToString()" CategoryProperty="Category" ValueProperty="TotalExpense" Fills="@PASTEL_COLOR_PALETTE">
            </RadzenPieSeries>
            <RadzenLegend Visible="false" Position="LegendPosition.Bottom" />
        </RadzenChart>
        <RadzenRow>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75ABF0" /> @Category.Others.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F075E8" /> @Category.HealthAndPersonalCare.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0BA75" /> @Category.Transportation.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F07D" /> @Category.Entertainment.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#4790EA" /> @Category.Pets.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#EA47E2" /> @Category.Gifts.ToString()</RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#9C75F0" /> @Category.HousingAndSupplies.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0758C" /> @Category.Sport.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#C9F075" /> @Category.Clothing.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F0D9" /> @Category.BillsAndUtilities.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#7B47EA" /> @Category.Insurance.ToString()</RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
@*COLUMN*@
@*<RadzenChart>
        <RadzenColumnSeries Data="@_dataGroupedByMonth" CategoryProperty="Month" Title="@_date.Year.ToString()" LineType="LineType.Dashed" ValueProperty="TotalExpense" />
        <RadzenColumnOptions Radius="5" />
        <RadzenValueAxis Formatter="@Format">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Total expense" />
        </RadzenValueAxis>
    </RadzenChart>*@
}
@code {
    private bool _loading = true;
    private IEnumerable<Xpense.Expense> _expenses = Array.Empty<Xpense.Expense>();
    private IList<MonthDataItem> _allYearDataGroupedByMonth;
    private IList<CategoryDataItem> _allYearDataGroupedByCategory;
    private IList<CategoryDataItem> _selectedMonthDataGroupedByCategory;
    private IList<int> _availableYears;
    private IList<string> _availableMonths;
    private int _selectedYear;
    private Month _selectedMonth;
    private double _averageExpensePerMonth;

    private static readonly IList<string> PASTEL_COLOR_PALETTE = new List<string>
    {
        "#75ABF0",
        "#9C75F0",
        "#F075E8",
        "#F0758C",
        "#F0BA75",
        "#C9F075",
        "#75F07D",
        "#75F0D9",
        // da qui in poi trasformo i primi 9 valori in HSL e diminuisco di 10 la loro luminosità ottenendo la seconda tranche di colori
        "#4790EA",
        "#7B47EA",
        "#EA47E2"
    };

    protected override async Task OnInitializedAsync()
    {
        _selectedYear = DateTimeOffset.Now.Year;
        _selectedMonth = (Month)DateTimeOffset.Now.Month;
        _averageExpensePerMonth = 0.0;
        InitializeAvailableYears();
        InitializeAvailableMonths();
        _allYearDataGroupedByMonth = new List<MonthDataItem>();
        _allYearDataGroupedByCategory = new List<CategoryDataItem>();
        _selectedMonthDataGroupedByCategory = new List<CategoryDataItem>();
        await GetExpensesAsync();
    }

    #region Utility Methods

    private void InitializeAvailableMonths()
    {
        _availableMonths = Enum.GetNames<Month>();
    }

    private void InitializeAvailableYears()
    {
        _availableYears = new List<int>();
        for (var year = 2021; year <= DateTimeOffset.Now.Year; year++)
        {
            _availableYears.Add(year);
        }
    }

    private async Task OnYearChange(object value)
    {
        _selectedYear = (int)value;
        await GetExpensesAsync();
    }

    private async Task OnMonthChange(object value)
    {
        _selectedMonth = Enum.Parse<Month>(value.ToString()!);
        await GetExpensesAsync();
    }

    private async Task GetExpensesAsync()
    {
        try
        {
            _loading = true;
            if (_selectedMonth is Month.AllMonths)
            {
                _expenses = (await ExpensesManager.GetAllAsync(null, null, _selectedYear.ToString()))
                    .OrderByDescending(e => e.ExpenseDetails.Date);

                var groupDataByMonth = GroupDataByMonth();
                var groupedDataByCategory = GroupDataByCategory();

                _allYearDataGroupedByMonth = FillDataForAllMonths(groupDataByMonth);
                _allYearDataGroupedByCategory = FillDataForAllCategories(groupedDataByCategory);
                _averageExpensePerMonth = GetAverageExpensesPerMonth(_allYearDataGroupedByMonth);
            }
            else
            {
                _expenses = (await ExpensesManager.GetAllAsync(null, null, $"{_selectedYear}-{(int)_selectedMonth:D2}"))
                    .OrderByDescending(e => e.ExpenseDetails.Date);

                var groupedDataByCategory = GroupDataByCategory();
                _selectedMonthDataGroupedByCategory = FillDataForAllCategories(groupedDataByCategory);
                _averageExpensePerMonth = _expenses.Select(d => d.ExpenseDetails.Value).Sum();
            }
        }
        catch (Exception e)
        {
            await DialogService.Alert($"Cannot retrieve expenses. Error: {e.Message}", "Error", new AlertOptions
            {
                ShowClose = false,
                OkButtonText = "Ok"
            });
        }
        finally
        {
            _loading = false;
        }
    }

    private static List<CategoryDataItem> FillDataForAllCategories(IReadOnlyCollection<CategoryDataItem> groupedData)
    {
        var finalData = new List<CategoryDataItem>();
        foreach (var category in Enum.GetNames(typeof(Category)))
        {
            var categoryData = groupedData.FirstOrDefault(d => d.Category == category);
            finalData.Add(categoryData ?? new CategoryDataItem
            {
                Category = category,
                TotalExpense = 0
            });
        }

        return finalData;
    }

    private static List<MonthDataItem> FillDataForAllMonths(IReadOnlyCollection<MonthDataItem> groupedData)
    {
        var finalData = new List<MonthDataItem>();
        for (var month = (int)Month.January; month <= (int)Month.December; month++)
        {
            var dataOfTheMonth = groupedData.FirstOrDefault(d => d.Month == month.ToString());
            finalData.Add(dataOfTheMonth ?? new MonthDataItem
                {
                    Month = month.ToString(),
                    TotalExpense = 0
                });
        }

        return finalData;
    }

    private double GetAverageExpensesPerMonth(IList<MonthDataItem> data)
    {
        var sumOfExpenses = 0.0;
        var finalMonth = (int)Month.December;
        var now = DateTimeOffset.Now;

        if (now.Year == _selectedYear)
        {
            finalMonth = now.Month;
        }

        for (var month = (int)Month.January; month <= finalMonth; month++)
        {
            sumOfExpenses += data[month - 1].TotalExpense;
        }

        var averageExpensesPerMonth = sumOfExpenses / finalMonth;

        return averageExpensesPerMonth;
    }

    private List<MonthDataItem> GroupDataByMonth()
    {
        return _expenses.Select(e => new MonthDataItem
            {
                Month = e.ExpenseDetails.Date.Month.ToString(),
                TotalExpense = e.ExpenseDetails.Value
            }).GroupBy(d => d.Month, d => d.TotalExpense, (month, totalExpenses) => new MonthDataItem
            {
                Month = month,
                TotalExpense = Math.Round(totalExpenses.Sum(), 2)
            }).ToList();
    }

    private List<CategoryDataItem> GroupDataByCategory()
    {
        return _expenses.Select(e => new CategoryDataItem
        {
            Category = e.ExpenseDetails.Category.ToString(),
            TotalExpense = e.ExpenseDetails.Value
            }).GroupBy(d => d.Category, d => d.TotalExpense, (category, totalExpenses) => new CategoryDataItem
        {
            Category = category,
                TotalExpense = Math.Round(totalExpenses.Sum(), 2)
        }).ToList();
    }

    #endregion

    #region Utility Classes

    private enum Month
    {
        AllMonths,
        January,
        February,
        March,
        April, 	
        May, 	
        June, 	
        July, 	
        August, 	
        September,
        October,
        November,
        December
    }

    private record MonthDataItem
    {
        public string Month { get; set; }
        public double TotalExpense { get; set; }
    }

    private record CategoryDataItem
    {
        public string Category { get; set; }
        public double TotalExpense { get; set; }
    }

    #endregion
}
