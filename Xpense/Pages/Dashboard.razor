@page "/dashboard"
@using Xpense.Utility
@inject ExpensesManager ExpensesManager
@inject IDialogService DialogService
@inject IFormatter Formatter

@if (_selectedYearExpenses == null)
{
    <Loading/>
}
else
{
    <RadzenCard>
        <div class="row">
            <div class="col h4 font-weight-bold">
                Count
            </div>
            <div class="col h4">
                @_selectedYearExpenses.Count()
            </div>
        </div>
        <div class="row">
            <div class="col h4 font-weight-bold">
                Total
            </div>
            <div class="col h4">
                @Formatter.FormatAsEuro(_selectedYearExpenses.Sum(e => e.ExpenseDetails.Value))
            </div>
        </div>
        <div class="row">
            <div class="col h4 font-weight-bold">
                AVG per month
            </div>
            <div class="col h4">
                @Formatter.FormatAsEuro(_averageExpensePerMonth)
            </div>
        </div>
    </RadzenCard>
    <RadzenDropDown AllowClear="false" TValue="int" Class="w-100" Data="@_availableYears" Change="@(OnChange)" Value="@_selectedYear"/>
@*BAR*@
    <RadzenCard>
        <RadzenChart>
            <RadzenBarSeries Data="@_dataGroupedByMonth" CategoryProperty="Month" Title="@_selectedYear.ToString()" LineType="LineType.Dashed" ValueProperty="TotalExpense"/>
            <RadzenValueAxis Formatter="@Formatter.FormatAsEuro">
                <RadzenGridLines Visible="true"/>
                <RadzenAxisTitle Text="Total expenses"/>
            </RadzenValueAxis>
            <RadzenBarOptions Radius="5"/>
        </RadzenChart>
    </RadzenCard>
    <RadzenCard>
        <RadzenChart>
            <RadzenPieSeries Data="@_dataGroupedByCategory" Title="@_selectedYear.ToString()" CategoryProperty="Category" ValueProperty="TotalExpense">
            </RadzenPieSeries>
        </RadzenChart>
    </RadzenCard>
@*COLUMN*@
@*<RadzenChart>
        <RadzenColumnSeries Data="@_dataGroupedByMonth" CategoryProperty="Month" Title="@_date.Year.ToString()" LineType="LineType.Dashed" ValueProperty="TotalExpense" />
        <RadzenColumnOptions Radius="5" />
        <RadzenValueAxis Formatter="@Format">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Total expense" />
        </RadzenValueAxis>
    </RadzenChart>*@
}
@code {
    private IEnumerable<Xpense.Expense> _selectedYearExpenses = Array.Empty<Xpense.Expense>();
    private IList<MonthDataItem> _dataGroupedByMonth;
    private IList<CategoryDataItem> _dataGroupedByCategory;
    private IList<int> _availableYears;
    private int _selectedYear;
    private double _averageExpensePerMonth;

    protected override async Task OnInitializedAsync()
    {
        _selectedYear = DateTimeOffset.Now.Year;
        _averageExpensePerMonth = 0.0;
        InitializeAvailableYears();
        _dataGroupedByMonth = new List<MonthDataItem>();
        _dataGroupedByCategory = new List<CategoryDataItem>();
        await GetExpensesAsync();
    }

    private void InitializeAvailableYears()
    {
        _availableYears = new List<int>();
        for (var year = 2021; year <= DateTimeOffset.Now.Year; year++)
        {
            _availableYears.Add(year);
        }
    }

    private async Task OnChange(object value)
    {
        _selectedYear = (int)value;
        await GetExpensesAsync();
    }

    #region Utility Methods

    private async Task GetExpensesAsync()
    {
        try
        {
            _selectedYearExpenses = (await ExpensesManager.GetAllAsync(null, null, _selectedYear.ToString()))
                .OrderByDescending(e => e.ExpenseDetails.Date);

            var groupDataByMonth = GroupDataByMonth();
            var groupedDataByCategory = GroupDataByCategory();

            _dataGroupedByMonth = FillDataForAllMonths(groupDataByMonth);
            _dataGroupedByCategory = FillDataForAllCategories(groupedDataByCategory);
            _averageExpensePerMonth = GetAverageExpensesPerMonth(_dataGroupedByMonth);
        }
        catch (Exception e)
        {
            await DialogService.AlertAsync(AlertType.Error, "Error", $"Cannot retrieve expenses. Error: {e}");
        }
    }

    private static List<CategoryDataItem> FillDataForAllCategories(IReadOnlyCollection<CategoryDataItem> groupedData)
    {
        var finalData = new List<CategoryDataItem>();
        foreach (var category in Enum.GetNames(typeof(Category)))
        {
            var categoryData = groupedData.FirstOrDefault(d => d.Category == category);
            finalData.Add(categoryData ?? new CategoryDataItem
            {
                Category = category,
                TotalExpense = 0
            });
        }

        return finalData;
    }

    private static List<MonthDataItem> FillDataForAllMonths(IReadOnlyCollection<MonthDataItem> groupedData)
    {
        var finalData = new List<MonthDataItem>();
        for (var month = 1; month <= 12; month++)
        {
            var dataOfTheMonth = groupedData.FirstOrDefault(d => d.Month == month.ToString());
            finalData.Add(dataOfTheMonth ?? new MonthDataItem
                {
                    Month = month.ToString(),
                    TotalExpense = 0
                });
        }

        return finalData;
    }

    private double GetAverageExpensesPerMonth(IList<MonthDataItem> data)
    {
        var sumOfExpenses = 0.0;
        var finalMonth = 12;
        var now = DateTimeOffset.Now;

        if (now.Year == _selectedYear)
        {
            finalMonth = now.Month;
        }

        for (var month = 1; month <= finalMonth; month++)
        {
            sumOfExpenses += data[month - 1].TotalExpense;
        }

        var averageExpensesPerMonth = sumOfExpenses / finalMonth;

        return averageExpensesPerMonth;
    }

    private List<MonthDataItem> GroupDataByMonth()
    {
        return _selectedYearExpenses.Select(e => new MonthDataItem
            {
                Month = e.ExpenseDetails.Date.Month.ToString(),
                TotalExpense = e.ExpenseDetails.Value
            }).GroupBy(d => d.Month, d => d.TotalExpense, (month, totalExpenses) => new MonthDataItem
            {
                Month = month,
                TotalExpense = totalExpenses.Sum()
            }).ToList();
    }

    private List<CategoryDataItem> GroupDataByCategory()
    {
        return _selectedYearExpenses.Select(e => new CategoryDataItem
        {
            Category = e.ExpenseDetails.Category.ToString(),
            TotalExpense = e.ExpenseDetails.Value
            }).GroupBy(d => d.Category, d => d.TotalExpense, (category, totalExpenses) => new CategoryDataItem
        {
            Category = category,
            TotalExpense = totalExpenses.Sum()
        }).ToList();
    }

    #endregion

    #region Utility Classes

    private record MonthDataItem
    {
        public string Month { get; set; }
        public double TotalExpense { get; set; }
    }

    private record CategoryDataItem
    {
        public string Category { get; set; }
        public double TotalExpense { get; set; }
    }

    #endregion
}
