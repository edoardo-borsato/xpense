@page "/dashboard"
@using Xpense.Utility
@inject ServiceClient ServiceClient
@inject DialogService DialogService
@inject IFormatter Formatter

@if (_loading)
{
    <Loading />
}
else
{
    <RadzenCard>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6"><strong>Total expenses</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6" Text="@Formatter.FormatAsEuro(_expenses.Sum(e => e.ExpenseDetails.Value))"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6"><strong>Total incomes</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6" Text="@Formatter.FormatAsEuro(_incomes.Sum(e => e.IncomeDetails.Value))"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem" Visible="@(_selectedMonth is Month.AllMonths)">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6"><strong>AVG expense per month</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6" Text="@Formatter.FormatAsEuro(_averageExpensePerMonth)"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="1rem" Visible="@(_selectedMonth is Month.AllMonths)">
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6"><strong>AVG income per month</strong></RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.H6" Text="@Formatter.FormatAsEuro(_averageIncomePerMonth)"></RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard>
        <div class="row">
            <div class="col h4">
                <RadzenDropDown AllowClear="false" TValue="int" Class="w-100" Data="@_availableYears" Change="@(OnYearChange)" Value="@_selectedYear" />
            </div>
            <div class="col h4">
                <RadzenDropDown AllowClear="false" TValue="string" Class="w-100" Data="@_availableMonths" Change="@(OnMonthChange)" Value="@_selectedMonth.ToString()" />
            </div>
        </div>
    </RadzenCard>

    <RadzenCard Visible="@(_selectedMonth is not Month.AllMonths)">
        <RadzenChart>
            <RadzenBarSeries Data="@_expensesForCurrentMonth" CategoryProperty="Month" Title="Expenses" ValueProperty="TotalExpense" />
            <RadzenBarSeries Data="@_incomesForCurrentMonth" CategoryProperty="Month" Title="Incomes" ValueProperty="TotalIncome" />
            <RadzenCategoryAxis Padding="20" Formatter="@Formatter.FormatAsMonth" />
            <RadzenValueAxis Formatter="@Formatter.FormatAsEuro" Min="0">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@_selectedMonth.ToString()" />
            </RadzenValueAxis>
            <RadzenBarOptions Radius="5" />
        </RadzenChart>
    </RadzenCard>
    <RadzenCard Visible="@(_selectedMonth is not Month.AllMonths)">
        <RadzenChart>
            <RadzenPieSeries Data="@_selectedMonthExpensesGroupedByCategory" Title="@_selectedMonth.ToString()" CategoryProperty="Category" ValueProperty="TotalExpense" Fills="@PASTEL_COLOR_PALETTE">
            </RadzenPieSeries>
            <RadzenLegend Visible="false" Position="LegendPosition.Bottom"/>
        </RadzenChart>
        <RadzenRow>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75ABF0"/> @Category.Others.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F075E8"/> @Category.HealthAndPersonalCare.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0BA75"/> @Category.Transportation.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F07D"/> @Category.Entertainment.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#4790EA"/> @Category.Pets.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#EA47E2"/> @Category.Gifts.ToString()</RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#9C75F0"/> @Category.HousingAndSupplies.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0758C"/> @Category.Sport.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#C9F075"/> @Category.Clothing.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F0D9"/> @Category.BillsAndUtilities.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#7B47EA"/> @Category.Insurance.ToString()</RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenCard Visible="@(_selectedMonth is Month.AllMonths)">
        @* <RadzenChart>
            <RadzenLineSeries Data="@_allYearExpensesGroupedByMonth" CategoryProperty="Month" Title="Expenses" ValueProperty="TotalExpense">
                <RadzenMarkers MarkerType="MarkerType.Square" />
            </RadzenLineSeries>
            <RadzenLineSeries Data="_allYearIncomesGroupedByMonth" CategoryProperty="Month" Title="Incomes" ValueProperty="TotalIncome">
                <RadzenMarkers MarkerType="MarkerType.Square" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" Formatter="@Formatter.FormatAsMonth" />
            <RadzenValueAxis Formatter="@Formatter.FormatAsEuro">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Cash flow" />
            </RadzenValueAxis>
        </RadzenChart> *@

        <RadzenChart>
            <RadzenBarSeries Data="@_allYearExpensesGroupedByMonth" CategoryProperty="Month" Title="Expenses" ValueProperty="TotalExpense"/>
            <RadzenCategoryAxis Padding="20" Formatter="@Formatter.FormatAsMonth" />
            <RadzenValueAxis Formatter="@Formatter.FormatAsEuro" Min="0">
                <RadzenGridLines Visible="true"/>
                <RadzenAxisTitle Text="@_selectedYear.ToString()"/>
            </RadzenValueAxis>
            <RadzenBarOptions Radius="5"/>
        </RadzenChart>
    </RadzenCard>
    <RadzenCard Visible="@(_selectedMonth is Month.AllMonths)">
        <RadzenChart>
            <RadzenPieSeries Data="@_allYearExpensesGroupedByCategory" Title="@_selectedYear.ToString()" CategoryProperty="Category" ValueProperty="TotalExpense" Fills="@PASTEL_COLOR_PALETTE">
            </RadzenPieSeries>
            <RadzenLegend Visible="false" Position="LegendPosition.Bottom" />
        </RadzenChart>
        <RadzenRow>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75ABF0" /> @Category.Others.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F075E8" /> @Category.HealthAndPersonalCare.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0BA75" /> @Category.Transportation.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F07D" /> @Category.Entertainment.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#4790EA" /> @Category.Pets.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#EA47E2" /> @Category.Gifts.ToString()</RadzenText>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenText><RadzenIcon Icon="stop" style="color:#9C75F0" /> @Category.HousingAndSupplies.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#F0758C" /> @Category.Sport.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#C9F075" /> @Category.Clothing.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#75F0D9" /> @Category.BillsAndUtilities.ToString()</RadzenText>
                <RadzenText><RadzenIcon Icon="stop" style="color:#7B47EA" /> @Category.Insurance.ToString()</RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
}
@code {
    private bool _loading = true;
    private IEnumerable<Xpense.Expense> _expenses = Array.Empty<Xpense.Expense>();
    private IEnumerable<Xpense.Income> _incomes = Array.Empty<Xpense.Income>();
    private IList<ExpensesByMonth> _allYearExpensesGroupedByMonth;
    private IList<IncomesByMonth> _allYearIncomesGroupedByMonth;
    private IList<ExpensesByCategory> _allYearExpensesGroupedByCategory;
    private IList<ExpensesByCategory> _selectedMonthExpensesGroupedByCategory;
    private IList<ExpensesByMonth> _expensesForCurrentMonth;
    private IList<IncomesByMonth> _incomesForCurrentMonth;
    private IList<int> _availableYears;
    private IList<string> _availableMonths;
    private int _selectedYear;
    private Month _selectedMonth;
    private double _averageExpensePerMonth;
    private double _averageIncomePerMonth;

    private static readonly IList<string> PASTEL_COLOR_PALETTE = new List<string>
    {
        "#75ABF0",
        "#9C75F0",
        "#F075E8",
        "#F0758C",
        "#F0BA75",
        "#C9F075",
        "#75F07D",
        "#75F0D9",
        // da qui in poi trasformo i primi 9 valori in HSL e diminuisco di 10 la loro luminosità ottenendo la seconda tranche di colori
        "#4790EA",
        "#7B47EA",
        "#EA47E2"
    };

    protected override async Task OnInitializedAsync()
    {
        _selectedYear = DateTimeOffset.Now.Year;
        _selectedMonth = (Month)DateTimeOffset.Now.Month;
        _averageExpensePerMonth = 0.0;
        _averageIncomePerMonth = 0.0;
        InitializeAvailableYears();
        InitializeAvailableMonths();
        _allYearExpensesGroupedByMonth = new List<ExpensesByMonth>();
        _allYearExpensesGroupedByCategory = new List<ExpensesByCategory>();
        _selectedMonthExpensesGroupedByCategory = new List<ExpensesByCategory>();
        _allYearIncomesGroupedByMonth = new List<IncomesByMonth>();
        _expensesForCurrentMonth = new List<ExpensesByMonth>();
        _incomesForCurrentMonth = new List<IncomesByMonth>();
        await GetExpensesAsync();
        await GetIncomesAsync();
    }

    #region Utility Methods

    private void InitializeAvailableMonths()
    {
        _availableMonths = Enum.GetNames<Month>();
    }

    private void InitializeAvailableYears()
    {
        _availableYears = new List<int>();
        for (var year = 2021; year <= DateTimeOffset.Now.Year; year++)
        {
            _availableYears.Add(year);
        }
    }

    private async Task OnYearChange(object value)
    {
        _selectedYear = (int)value;
        await GetExpensesAsync();
        await GetIncomesAsync();
    }

    private async Task OnMonthChange(object value)
    {
        _selectedMonth = Enum.Parse<Month>(value.ToString()!);
        await GetExpensesAsync();
        await GetIncomesAsync();
    }

    private async Task GetIncomesAsync()
    {
        try
        {
            _loading = true;
            if (_selectedMonth is Month.AllMonths)
            {
                _incomes = (await ServiceClient.GetAllIncomesAsync(null, null, _selectedYear.ToString()))
                    .OrderByDescending(e => e.IncomeDetails.Date);

                var groupDataByMonth = GroupIncomesByMonth();

                _allYearIncomesGroupedByMonth = FillDataForAllMonths(groupDataByMonth);
                _averageIncomePerMonth = GetAverageIncomesPerMonth(_allYearIncomesGroupedByMonth);
            }
            else
            {
                _incomes = (await ServiceClient.GetAllIncomesAsync(null, null, $"{_selectedYear}-{(int)_selectedMonth:D2}"))
                    .OrderByDescending(e => e.IncomeDetails.Date);

                _averageIncomePerMonth = _incomes.Select(d => d.IncomeDetails.Value).Sum();
                var incomesForCurrentMonth = new List<IncomesByMonth>();
                var incomeForCurrentMonth = new IncomesByMonth
                {
                        Month = ((int)_selectedMonth).ToString(),
                    TotalIncome = _averageIncomePerMonth
                };
                incomesForCurrentMonth.Add(incomeForCurrentMonth);
                _incomesForCurrentMonth = incomesForCurrentMonth;
            }
        }
        catch (Exception e)
        {
            await DialogService.Alert($"Cannot retrieve expenses. Error: {e.Message}", "Error", new AlertOptions
                {
                    ShowClose = false,
                    OkButtonText = "Ok"
                });
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task GetExpensesAsync()
    {
        try
        {
            _loading = true;
            if (_selectedMonth is Month.AllMonths)
            {
                _expenses = (await ServiceClient.GetAllExpensesAsync(null, null, _selectedYear.ToString()))
                    .OrderByDescending(e => e.ExpenseDetails.Date);

                var groupDataByMonth = GroupExpensesByMonth();
                var groupedDataByCategory = GroupExpensesByCategory();

                _allYearExpensesGroupedByMonth = FillDataForAllMonths(groupDataByMonth);
                _allYearExpensesGroupedByCategory = FillDataForAllCategories(groupedDataByCategory);
                _averageExpensePerMonth = GetAverageExpensesPerMonth(_allYearExpensesGroupedByMonth);
            }
            else
            {
                _expenses = (await ServiceClient.GetAllExpensesAsync(null, null, $"{_selectedYear}-{(int)_selectedMonth:D2}"))
                    .OrderByDescending(e => e.ExpenseDetails.Date);

                var groupedDataByCategory = GroupExpensesByCategory();
                _selectedMonthExpensesGroupedByCategory = FillDataForAllCategories(groupedDataByCategory);
                _averageExpensePerMonth = _expenses.Select(d => d.ExpenseDetails.Value).Sum();
                var expensesForCurrentMonth = new List<ExpensesByMonth>();
                var expenseForCurrentMonth = new ExpensesByMonth
                    {
                        Month = ((int)_selectedMonth).ToString(),
                        TotalExpense = _averageExpensePerMonth
                    };
                expensesForCurrentMonth.Add(expenseForCurrentMonth);
                _expensesForCurrentMonth = expensesForCurrentMonth;
            }
        }
        catch (Exception e)
        {
            await DialogService.Alert($"Cannot retrieve expenses. Error: {e.Message}", "Error", new AlertOptions
                {
                    ShowClose = false,
                    OkButtonText = "Ok"
                });
        }
        finally
        {
            _loading = false;
        }
    }

    private static List<ExpensesByCategory> FillDataForAllCategories(IReadOnlyCollection<ExpensesByCategory> groupedData)
    {
        var finalData = new List<ExpensesByCategory>();
        foreach (var category in Enum.GetNames(typeof(Category)))
        {
            var categoryData = groupedData.FirstOrDefault(d => d.Category == category);
            finalData.Add(categoryData ?? new ExpensesByCategory
                {
                    Category = category,
                    TotalExpense = 0
                });
        }

        return finalData;
    }

    private static List<IncomesByMonth> FillDataForAllMonths(IReadOnlyCollection<IncomesByMonth> groupedData)
    {
        var finalData = new List<IncomesByMonth>();
        for (var month = (int)Month.January; month <= (int)Month.December; month++)
        {
            var dataOfTheMonth = groupedData.FirstOrDefault(d => d.Month == month.ToString());
            finalData.Add(dataOfTheMonth ?? new IncomesByMonth
            {
                Month = month.ToString(),
                TotalIncome = 0
            });
        }

        return finalData;
    }

    private static List<ExpensesByMonth> FillDataForAllMonths(IReadOnlyCollection<ExpensesByMonth> groupedData)
    {
        var finalData = new List<ExpensesByMonth>();
        for (var month = (int)Month.January; month <= (int)Month.December; month++)
        {
            var dataOfTheMonth = groupedData.FirstOrDefault(d => d.Month == month.ToString());
            finalData.Add(dataOfTheMonth ?? new ExpensesByMonth
                {
                    Month = month.ToString(),
                    TotalExpense = 0
                });
        }

        return finalData;
    }

    private double GetAverageIncomesPerMonth(IList<IncomesByMonth> data)
    {
        var sumOfExpenses = 0.0;
        var finalMonth = (int)Month.December;
        var now = DateTimeOffset.Now;

        if (now.Year == _selectedYear)
        {
            finalMonth = now.Month;
        }

        for (var month = (int)Month.January; month <= finalMonth; month++)
        {
            sumOfExpenses += data[month - 1].TotalIncome;
        }

        var averageExpensesPerMonth = sumOfExpenses / finalMonth;

        return averageExpensesPerMonth;
    }

    private double GetAverageExpensesPerMonth(IList<ExpensesByMonth> data)
    {
        var sumOfExpenses = 0.0;
        var finalMonth = (int)Month.December;
        var now = DateTimeOffset.Now;

        if (now.Year == _selectedYear)
        {
            finalMonth = now.Month;
        }

        for (var month = (int)Month.January; month <= finalMonth; month++)
        {
            sumOfExpenses += data[month - 1].TotalExpense;
        }

        var averageExpensesPerMonth = sumOfExpenses / finalMonth;

        return averageExpensesPerMonth;
    }

    private List<IncomesByMonth> GroupIncomesByMonth()
    {
        return _incomes.Select(e => new IncomesByMonth
            {
                Month = e.IncomeDetails.Date.Month.ToString(),
                TotalIncome = e.IncomeDetails.Value
            }).GroupBy(d => d.Month, d => d.TotalIncome, (month, totalIncome) => new IncomesByMonth
            {
                Month = month,
                TotalIncome = Math.Round(totalIncome.Sum(), 2)
            })
            .ToList();
    }

    private List<ExpensesByMonth> GroupExpensesByMonth()
    {
        return _expenses.Select(e => new ExpensesByMonth
            {
                Month = e.ExpenseDetails.Date.Month.ToString(),
                TotalExpense = e.ExpenseDetails.Value
            }).GroupBy(d => d.Month, d => d.TotalExpense, (month, totalExpenses) => new ExpensesByMonth
            {
                Month = month,
                TotalExpense = Math.Round(totalExpenses.Sum(), 2)
            })
            .ToList();
    }

    private List<ExpensesByCategory> GroupExpensesByCategory()
    {
        return _expenses.Select(e => new ExpensesByCategory
            {
                Category = e.ExpenseDetails.Category.ToString(),
                TotalExpense = e.ExpenseDetails.Value
            })
            .GroupBy(d => d.Category, d => d.TotalExpense, (category, totalExpenses) => new ExpensesByCategory
                {
                    Category = category,
                    TotalExpense = Math.Round(totalExpenses.Sum(), 2)
                })
            .ToList();
    }

    #endregion

    #region Utility Classes

    private record IncomesByMonth
    {
        public string Month { get; set; }
        public double TotalIncome { get; set; }
    }

    private record ExpensesByMonth
    {
        public string Month { get; set; }
        public double TotalExpense { get; set; }
    }

    private record ExpensesByCategory
    {
        public string Category { get; set; }
        public double TotalExpense { get; set; }
    }

    #endregion
}
