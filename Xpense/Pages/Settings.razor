@page "/settings"
@inject DialogService DialogService
@inject ISettingsManager SettingsManager

@if (_settingsData == null)
{
    <Loading />
}
else
{
    <RadzenCard>
        <EditForm Model="_settingsData" OnSubmit="@Submit">
            <RadzenRow Gap="1rem">
                <RadzenColumn>
                    <RadzenRow Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6"><strong>Username</strong></RadzenText>
                    </RadzenRow>
                    <RadzenRow Gap="1rem">
                        <RadzenTextBox @bind-Value="@_settingsData.Username" Class="w-100" />
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem" class="rz-text-align-right">
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Save"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </EditForm>
    </RadzenCard>
}

@code {

    private readonly ExpensesServiceSettings _settingsData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _settingsData.Username = SettingsManager.GetUsername();
            _settingsData.Url = SettingsManager.GetExpensesServiceUri().AbsoluteUri;
        }
        catch (Exception e)
        {
            await DialogService.Alert($"Unable to retrieve settings. Error: {e.Message}", "Error", new AlertOptions
            {
                ShowClose = false,
                OkButtonText = "Ok"
            });
        }
    }

    private async Task Submit()
    {
        var confirmed = await DialogService.Confirm("Are you sure you want to save settings?", "Save settings", new ConfirmOptions
        {
            ShowClose = false,
            OkButtonText = "Yes",
            CancelButtonText = "No"
        });
        if (confirmed is not null && (bool)confirmed)
        {
            try
            {
                SettingsManager.SetUsername(_settingsData.Username);
                await DialogService.Alert("Settings saved", "Save settings", new AlertOptions
                {
                    ShowClose = false,
                    OkButtonText = "Ok"
                });
            }
            catch (Exception e)
            {
                await DialogService.Alert($"Unable to save settings. Error: {e.Message}", "Error", new AlertOptions
                {
                        ShowClose = false,
                        OkButtonText = "Ok"
                });
            }
        }
    }

    private record ExpensesServiceSettings
    {
        public string Username { get; set; }
        public string Url { get; set; }
    }
}
