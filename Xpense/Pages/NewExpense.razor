@page "/newexpense"
@inject ExpensesManager ExpensesManager
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@if (Item == null)
{
    <Loading />
}
else
{
    <button class="btn btn-primary" @onclick="@Back">Back</button>
    <br />
    <EditForm Model="Item" OnSubmit="@Submit">
        <table class="table">
            <tbody>
                <tr class="h6">
                    <th>Value (€)</th>
                    <td><RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value="@Item.Value" Class="w-100" /></td>
                </tr>
                <tr class="h6">
                    <th>Reason</th>
                    <td><RadzenTextBox @bind-Value="@Item.Reason" Class="w-100" /></td>
                </tr>
                <tr class="h6">
                    <th>Date</th>
                    <td><RadzenDatePicker @bind-Value=@Item.Date DateFormat="yyyy-MM-dd" Class="w-100" /></td>
                </tr>
                <tr class="h6">
                    <th>Category</th>
                    <td><RadzenDropDown AllowClear="false" Class="w-100" TValue="string" Data="@Enum.GetNames(typeof(Category))" Change="@(OnCategoryChange)" Value="@Item.Category" /></td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-primary float-right" type="submit">Create</button>
    </EditForm>
}

@code {
    private ExpenseDetails Item { get; set; }

    protected override void OnInitialized()
    {
        Item = new ExpenseDetails
            {
                Date = DateTimeOffset.Now
            };
    }

    private async Task Submit()
    {
        var confirmed = await DialogService.ConfirmAsync("Create new expense", "Are you sure you want to create this new expense?");
        if (confirmed)
        {
            try
            {
                var createdExpense = await ExpensesManager.CreateAsync(Item);
                await DialogService.AlertAsync(AlertType.Success, "New Expense created", $"New expense with ID {createdExpense.Id} has been created");
                NavigationManager.NavigateTo("expenses");
            }
            catch (Exception e)
            {
                await DialogService.AlertAsync(AlertType.Error, "Error", $"Unable to create new expense. Error: {e}");
            }
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("expenses");
    }

    private void OnCategoryChange(object args)
    {
        var value = args.ToString();
        Item.Category = Enum.Parse<Category>(value!);
    }
}