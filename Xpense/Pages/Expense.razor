@page "/expense/{id}"
@inject ExpensesManager ExpensesManager
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@if (Item == null)
{
    <Loading />
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@Back" Text="Back"></RadzenButton>
    <br />
    <RadzenCard>
        <EditForm Model="Item" OnSubmit="@Submit">
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="3">
                    <RadzenText TextStyle="TextStyle.H6"><strong>Id</strong></RadzenText>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenText TextStyle="TextStyle.H6">@Item.Id</RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="3">
                    <RadzenText TextStyle="TextStyle.H6"><strong>Value (€)</strong></RadzenText>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenNumeric ShowUpDown="false" TValue="double" @bind-Value="@Item.ExpenseDetails.Value" Class="w-100" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="3">
                    <RadzenText TextStyle="TextStyle.H6"><strong>Reason</strong></RadzenText>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenTextBox @bind-Value="@Item.ExpenseDetails.Reason" Class="w-100" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="3">
                    <RadzenText TextStyle="TextStyle.H6"><strong>Date</strong></RadzenText>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenDatePicker @bind-Value=@Item.ExpenseDetails.Date DateFormat="yyyy-MM-dd" Class="w-100" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="3">
                    <RadzenText TextStyle="TextStyle.H6"><strong>Category</strong></RadzenText>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenDropDown AllowClear="false" Class="w-100" TValue="string" Data="@Enum.GetNames(typeof(Category))" Change="@(OnCategoryChange)" Value="@Item.ExpenseDetails.Category" />
                </RadzenColumn>
            </RadzenRow>
            <br />
            <RadzenRow Gap="1rem" class="rz-text-align-right">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Icon="delete" Click="@DeleteExpenseAsync"></RadzenButton>
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Update"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </EditForm>
    </RadzenCard>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Xpense.Expense Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await ExpensesManager.GetAsync(Guid.Parse(Id));
        }
        catch (Exception e)
        {
            await DialogService.AlertAsync(AlertType.Error, "Error", $"Unable to retrieve expense with ID {Id}. Error: {e}");
        }
    }

    private async Task Submit()
    {
        var confirmed = await DialogService.ConfirmAsync("Update expense", $"Are you sure you want to update expense with ID {Id}?");
        if (confirmed)
        {
            try
            {
                var updatedExpense = await ExpensesManager.UpdateAsync(Item.Id!.Value, Item.ExpenseDetails);
                await DialogService.AlertAsync(AlertType.Success, "Update expense", $"Expense with ID {updatedExpense.Id} has been updated");
                Back();
            }
            catch (Exception e)
            {
                await DialogService.AlertAsync(AlertType.Error, "Error", $"Unable to update expense with ID {Id}. Error: {e}");
            }
        }
    }

    private async Task DeleteExpenseAsync()
    {
        var confirmed = await DialogService.ConfirmAsync("Delete expense", $"Are you sure you want to delete expense with ID {Id}?");
        if (confirmed)
        {
            try
            {
                await ExpensesManager.DeleteAsync(Item.Id!.Value);
                await DialogService.AlertAsync(AlertType.Success, "Delete expense", $"Expense with ID {Id} has been deleted");
                Back();
            }
            catch (Exception e)
            {
                await DialogService.AlertAsync(AlertType.Error, "Error", $"Unable to delete expense with ID {Id}. Error: {e}");
            }
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("expenses");
    }

    private void OnCategoryChange(object args)
    {
        var value = args.ToString();
        Item.ExpenseDetails.Category = Enum.Parse<Category>(value!);
    }
}
