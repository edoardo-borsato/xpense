@*TODO: capire come utilizzare questa classe come ConfirmDialog custom*@

@if (Show)
{
    <ModalDialog Title="Confirm">
        <ContentBody>
            <p class="mb-4">@Message</p>
        </ContentBody>
        <Footer>
            <button class="btn btn-secondary float-left" @onclick="() => Close(false)">No</button>
            <button class="btn btn-primary float-right" @onclick="() => Close(true)">Yes</button>
        </Footer>
    </ModalDialog>
}

@code {
    [Parameter]
    public string Message { get; set; }

    private bool Show { get; set; }

    private bool _confirmResult;

    private CancellationTokenSource _cancellationTokenSource = new();

    private void Close(bool value)
    {
        _confirmResult = value;
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

    public async Task<bool> DisplayAsync()
    {
        Show = true;
        StateHasChanged();

        var task = Task.Run(() =>
        {
            var cancellationToken = _cancellationTokenSource.Token;
            while (!cancellationToken.IsCancellationRequested)
            {
                // wait
                Task.Delay(10, cancellationToken);
            }
        });

        await task;

        _cancellationTokenSource = new CancellationTokenSource();
        Show = false;
        StateHasChanged();

        return _confirmResult;
    }
}
